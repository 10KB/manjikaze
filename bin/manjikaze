#!/bin/bash
set -e

# Determine the actual script path regardless of symlinks
SCRIPT_PATH=$(readlink -f "$0")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")

# Default installation directory
DEFAULT_MANJIKAZE_DIR="$HOME/.manjikaze"

# Check if we're running from the default installation directory
if [[ "$SCRIPT_DIR" != "$DEFAULT_MANJIKAZE_DIR/bin" ]]; then
    # We're in dev mode - set MANJIKAZE_DIR to the parent of the script directory
    export MANJIKAZE_DIR=$(dirname "$SCRIPT_DIR")
    export DEV_MODE=true
else
    export MANJIKAZE_DIR="$DEFAULT_MANJIKAZE_DIR"
    export DEV_MODE=false
fi

source "$MANJIKAZE_DIR/lib/common.sh"
source "$MANJIKAZE_DIR/lib/state.sh"
source "$MANJIKAZE_DIR/lib/migrations.sh"
source "$MANJIKAZE_DIR/lib/audits.sh"
source "$MANJIKAZE_DIR/lib/menus.sh"

check_updates() {
    if [ -d "$MANJIKAZE_DIR/.git" ] && [ "$DEV_MODE" = false ]; then
        status "Checking for Manjikaze updates..."
        git -C "$MANJIKAZE_DIR" fetch origin >/dev/null 2>&1
        local_rev=$(git -C "$MANJIKAZE_DIR" rev-parse HEAD)
        remote_rev=$(git -C "$MANJIKAZE_DIR" rev-parse @{u})
        if [ "$local_rev" != "$remote_rev" ]; then
            if gum confirm "Updates available. Would you like to update Manjikaze?"; then
                if ! git -C "$MANJIKAZE_DIR" pull --ff-only; then
                    if git -C "$MANJIKAZE_DIR" diff --quiet HEAD; then
                        status "Update failed. Please resolve conflicts in $MANJIKAZE_DIR and try again."
                        exit 1
                    fi

                    if gum confirm "Update failed due to local changes. Would you like to discard local changes and force update?"; then
                        status "Discarding local changes and forcing update..."
                        git -C "$MANJIKAZE_DIR" reset --hard HEAD >/dev/null 2>&1
                        git -C "$MANJIKAZE_DIR" pull --ff-only
                        exec "$0" "$@"
                    else
                        status "Update cancelled. Please commit or stash your changes in $MANJIKAZE_DIR."
                        exit 1
                    fi
                else
                    exec "$0" "$@"
                fi
            fi
        fi
    fi
}

check_prerequisites() {
    status "Checking system prerequisites..."
    local prerequisites=(archlinux-keyring base-devel git gum jq yay)
    local to_install=()

    for pkg in "${prerequisites[@]}"; do
        if ! is_installed "$pkg"; then
            to_install+=("$pkg")
        fi
    done

    if [ ${#to_install[@]} -ne 0 ]; then
        status "Installing prerequisites: ${to_install[*]}..."
        sudo pacman -Sy "${to_install[@]}" --noconfirm --noprogressbar --quiet
    fi
}

show_header() {
    local title="Manjikaze $(get_version)"
    local subtitle="10KB Development Environment"

    if [ "$DEV_MODE" = true ]; then
        title="$title [DEVELOPMENT MODE]"
        subtitle="$subtitle (path: $MANJIKAZE_DIR)"
    fi

    gum style \
        --border double \
        --align center \
        --width 70 \
        --margin "1 2" \
        --padding "1 2" \
        "$title" \
        "$subtitle"
}

main() {
    if [[ "$1" == "update" ]]; then
        show_header
        source "$MANJIKAZE_DIR/app/installations/update-installed-apps.sh"
        exit 0
    fi

    clear
    show_header

    status "Requesting administrator privileges for system commands..."
    sudo -v
    (while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &)

    check_updates "$@"

    check_prerequisites

    run_migrations || status "Migration check/run finished with errors or cancellation."

    run_audits || status "Audit check/run finished with errors or cancellation."

    clear
    show_header

    handle_menu menu "Main Menu"
}

main "$@"
